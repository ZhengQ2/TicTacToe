/*
 * Zheng Qiu
 * June 12, 2020
 * Make a Tic-Tac-Toe game
 */
package qiutictactoe;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Zheng Qiu
 */
public class QiuTicTacToe extends javax.swing.JFrame {

    int[][] chess = new int[3][3];//use this to store the player's choice 
    boolean player1;//use this to check which player is doing the next step
    int playerNumber;//to store the player number, usually one or two
    String difficulties;//store the difficulties if is human vs computer

    public QiuTicTacToe() {
        //set the title for this program
        this.setTitle("Tic-Tac-Toe");
        playerNumber = 0;//to initialize the number of it
        difficulties = "";//to initialize the difficulties of the game
        player1 = true;//at first is player 1 doing the first step
        initComponents();
        for (int row = 0; row < 3; row++) {
            for (int column = 0; column < 3; column++) {
                chess[row][column] = 0;
            }
        }
        //set all the chesstable buttons into light grey, which makes them different with other buttons
        btnChess1.setBackground(Color.lightGray);
        btnChess2.setBackground(Color.lightGray);
        btnChess3.setBackground(Color.lightGray);
        btnChess4.setBackground(Color.lightGray);
        btnChess5.setBackground(Color.lightGray);
        btnChess6.setBackground(Color.lightGray);
        btnChess7.setBackground(Color.lightGray);
        btnChess8.setBackground(Color.lightGray);
        btnChess9.setBackground(Color.lightGray);
        //and set all the button enable to let the user set the model first
        disableBtns();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngDifficulties = new javax.swing.ButtonGroup();
        scrResult = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        pnlChesstable = new javax.swing.JPanel();
        btnChess1 = new javax.swing.JButton();
        btnChess2 = new javax.swing.JButton();
        btnChess3 = new javax.swing.JButton();
        btnChess4 = new javax.swing.JButton();
        btnChess5 = new javax.swing.JButton();
        btnChess6 = new javax.swing.JButton();
        btnChess9 = new javax.swing.JButton();
        btnChess8 = new javax.swing.JButton();
        btnChess7 = new javax.swing.JButton();
        lblPlayer = new javax.swing.JLabel();
        lblDifficulties = new javax.swing.JLabel();
        btnEasy = new javax.swing.JRadioButton();
        btnMiddle = new javax.swing.JRadioButton();
        btnHard = new javax.swing.JRadioButton();
        btnStart = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblDefinition = new javax.swing.JLabel();
        SpinnerModel model = new SpinnerNumberModel(2, 1, 2, 1);
        spnPlayer = new javax.swing.JSpinner(model);
        btnRule = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtResult.setColumns(20);
        txtResult.setRows(5);
        txtResult.setText("Welcome to Tic-Tac-Toe Game!\nPlease choose the player number and the difficulties for computer (if only one player).\nClick start to start the game.");
        scrResult.setViewportView(txtResult);

        pnlChesstable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnChess1.setBackground(new java.awt.Color(204, 204, 204));
        btnChess1.setFont(new java.awt.Font("宋体", 0, 48)); // NOI18N
        btnChess1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess1ActionPerformed(evt);
            }
        });

        btnChess2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess2ActionPerformed(evt);
            }
        });

        btnChess3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess3ActionPerformed(evt);
            }
        });

        btnChess4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess4ActionPerformed(evt);
            }
        });

        btnChess5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess5ActionPerformed(evt);
            }
        });

        btnChess6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess6ActionPerformed(evt);
            }
        });

        btnChess9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess9ActionPerformed(evt);
            }
        });

        btnChess8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess8ActionPerformed(evt);
            }
        });

        btnChess7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChess7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlChesstableLayout = new javax.swing.GroupLayout(pnlChesstable);
        pnlChesstable.setLayout(pnlChesstableLayout);
        pnlChesstableLayout.setHorizontalGroup(
            pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChesstableLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnChess4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChess1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChess7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnChess5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChess2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChess8, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnChess6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChess3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChess9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        pnlChesstableLayout.setVerticalGroup(
            pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChesstableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChess3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnChess2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnChess1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChess4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnChess6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnChess5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChesstableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChess7, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChess8, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChess9, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        lblPlayer.setText("Player:");

        lblDifficulties.setText("Difficulties:");

        btngDifficulties.add(btnEasy);
        btnEasy.setText("Easy Computer");

        btngDifficulties.add(btnMiddle);
        btnMiddle.setText("Middle Computer");

        btngDifficulties.add(btnHard);
        btnHard.setText("Hard Computer");

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblDefinition.setText("Player 1 is red and Player 2 is green. Computer is ALWAYS Player 2.");

        btnRule.setText("Read the rule");
        btnRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRuleActionPerformed(evt);
            }
        });

        btnReset.setText("Reset the game");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrResult)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDefinition)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlChesstable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPlayer)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spnPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblDifficulties)
                                    .addComponent(btnEasy)
                                    .addComponent(btnMiddle)
                                    .addComponent(btnHard)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnExit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnLoad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnRule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(scrResult, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDefinition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlChesstable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlayer)
                            .addComponent(spnPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDifficulties)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEasy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMiddle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHard)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStart)
                            .addComponent(btnReset))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLoad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExit))
                            .addComponent(btnRule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);//exit the game if click this button
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        txtResult.setText("Player 1 start first!");//set the title to the defult one
        //set all the chess buttons into nothing
        btnChess1.setText("");
        btnChess2.setText("");
        btnChess3.setText("");
        btnChess4.setText("");
        btnChess5.setText("");
        btnChess6.setText("");
        btnChess7.setText("");
        btnChess8.setText("");
        btnChess9.setText("");
        //and enable all the buttons
        enableBtns();
        //and set the chess result to 0
        for (int row = 0; row < 3; row++) {
            for (int column = 0; column < 3; column++) {
                chess[row][column] = 0;
            }
        }
        //and set all the colours to white
        btnChess1.setBackground(Color.lightGray);
        btnChess2.setBackground(Color.lightGray);
        btnChess3.setBackground(Color.lightGray);
        btnChess4.setBackground(Color.lightGray);
        btnChess5.setBackground(Color.lightGray);
        btnChess6.setBackground(Color.lightGray);
        btnChess7.setBackground(Color.lightGray);
        btnChess8.setBackground(Color.lightGray);
        btnChess9.setBackground(Color.lightGray);

        //set the player1 = true becuase player 1 is always start the game
        player1 = true;
        //store the player number the user choose
        playerNumber = (int) spnPlayer.getValue();
        //and store the difficulties the user choose
        if (btnEasy.isSelected()) {
            difficulties = "easy";
        } else if (btnMiddle.isSelected()) {
            difficulties = "middle";
        } else if (btnHard.isSelected()) {
            difficulties = "hard";
        } else {
            if (playerNumber == 1) {
                String msg = "One player must choose the difficulties of computer\nPLEASE CHECK YOUR CHOICE!";
                gameFinish(msg);
            }
        }
        
        //and also disable the game rule choices to avoid rules change by accident
        spnPlayer.setEnabled(false);
        btnEasy.setEnabled(false);
        btnMiddle.setEnabled(false);
        btnHard.setEnabled(false);
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnChess1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess1ActionPerformed
        if (chess[0][0] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(0, 0, 1);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(0, 0, 1);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess1ActionPerformed

    private void btnChess2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess2ActionPerformed
        if (chess[0][1] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(0, 1, 2);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(0, 1, 2);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess2ActionPerformed

    private void btnChess3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess3ActionPerformed
        if (chess[0][2] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(0, 2, 3);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(0, 2, 3);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess3ActionPerformed

    private void btnChess4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess4ActionPerformed
        if (chess[1][0] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(1, 0, 4);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(1, 0, 4);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess4ActionPerformed

    private void btnChess5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess5ActionPerformed
        if (chess[1][1] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(1, 1, 5);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(1, 1, 5);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess5ActionPerformed

    private void btnChess6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess6ActionPerformed
        if (chess[1][2] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(1, 2, 6);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(1, 2, 6);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess6ActionPerformed

    private void btnChess7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess7ActionPerformed
        if (chess[2][0] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(2, 0, 7);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(2, 0, 7);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess7ActionPerformed

    private void btnChess8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess8ActionPerformed
        if (chess[2][1] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(2, 1, 8);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(2, 1, 8);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess8ActionPerformed

    private void btnChess9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChess9ActionPerformed
        if (chess[2][2] == 0) {//check if this block selected or not
            if (player1 == true) {
                player1NextStep(2, 2, 9);//if this button is click by player one, run the method and input the row, column and button number
            } else {
                player2NextStep(2, 2, 9);//if this button is click by player two, run the method and input the row, column and button number
            }
            if (playerNumber == 1) {
                if (difficulties.equals("easy")) {
                    aiEasy();
                } else if (difficulties.equals("middle")) {
                    aiMiddle();
                } else if (difficulties.equals("hard")) {
                    aiHard();
                }
            }
            checkWinner();
        }
    }//GEN-LAST:event_btnChess9ActionPerformed

    private void btnRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRuleActionPerformed
        //display the rule if click the button
        JOptionPane.showMessageDialog(null, "The object of Tic Tac Toe is to get three in a row. You play on a three by three game board. \n"
                + "The first player is known as X and the second is O. Players alternate placing Xs and Os on the game board until either oppent has three in a row or all nine squares are filled. \n"
                + "X always goes first, and in the event that no one has three in a row, the stalemate is called a cat game.", "Rule", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnRuleActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        //if click the button, finish this round
        String msg = "Welcome to Tic-Tac-Toe Game!";
        gameFinish(msg);
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String gameChess = "";
        for (int row = 0; row < 3; row++) {
            for (int column = 0; column < 3; column++) {
                gameChess += chess[row][column] + "\n";//store all the result of the chess in the string
            }
        }
        try {
            File file = new File("src/qiutictactoe/save.txt");//catch the data file
            if (!file.exists()) {
                file.createNewFile();
            }
            PrintWriter fw = new PrintWriter(file);
            fw.write(playerNumber + "\n" + difficulties + "\n" + gameChess);
            fw.flush();
            fw.close();
        } catch (IOException ex) {
            System.out.println("Error" + ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        try {
            String sPlayerNumber;//used for store the name load from data file
            String[][] sChess = new String[3][3]; 
            File file = new File("src/qiutictactoe/save.txt");//catch and scanning the file
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                sPlayerNumber = scanner.nextLine();
                difficulties = scanner.nextLine();
                sChess[0][0] = scanner.nextLine();
                sChess[0][1] = scanner.nextLine();
                sChess[0][2] = scanner.nextLine();
                sChess[1][0] = scanner.nextLine();
                sChess[1][1] = scanner.nextLine();
                sChess[1][2] = scanner.nextLine();
                sChess[2][0] = scanner.nextLine();
                sChess[2][1] = scanner.nextLine();
                sChess[2][2] = scanner.nextLine();
                playerNumber = Integer.parseInt(sPlayerNumber);
                for (int row = 0; row < 3; row++) {
                    for (int column = 0; column < 3; column++) {
                        chess[row][column] = Integer.parseInt(sChess[row][column]);
                    }
                }

            }
            //check if the save file find or not
            if (chess[0][0] == 0 && chess[0][1] == 0 && chess[0][2] == 0 && chess[1][0] == 0 && chess[1][1] == 0 && chess[1][2] == 0 && chess[2][0] == 0 && chess[2][1] == 0 && chess[2][2] == 0) {
                JOptionPane.showMessageDialog(null, "Please check your input, cannot find the saving.");
            } else {
                //if is found, enable set all the colours to those button
                enableBtns();
                if (chess[0][0] == 1) {
                    btnChess1.setBackground(Color.red);
                } else if (chess[0][0] == 2) {
                    btnChess1.setBackground(Color.green);
                }

                if (chess[0][1] == 1) {
                    btnChess2.setBackground(Color.red);
                } else if (chess[0][1] == 2) {
                    btnChess2.setBackground(Color.green);
                }
                if (chess[0][2] == 1) {
                    btnChess3.setBackground(Color.red);
                } else if (chess[0][2] == 2) {
                    btnChess3.setBackground(Color.green);
                }
                if (chess[1][0] == 1) {
                    btnChess4.setBackground(Color.red);
                } else if (chess[1][0] == 2) {
                    btnChess4.setBackground(Color.green);
                }
                if (chess[1][1] == 1) {
                    btnChess5.setBackground(Color.red);
                } else if (chess[1][1] == 2) {
                    btnChess5.setBackground(Color.green);
                }
                if (chess[1][2] == 1) {
                    btnChess6.setBackground(Color.red);
                } else if (chess[1][2] == 2) {
                    btnChess6.setBackground(Color.green);
                }
                if (chess[2][0] == 1) {
                    btnChess7.setBackground(Color.red);
                } else if (chess[2][0] == 2) {
                    btnChess7.setBackground(Color.green);
                }
                if (chess[2][1] == 1) {
                    btnChess8.setBackground(Color.red);
                } else if (chess[2][1] == 2) {
                    btnChess8.setBackground(Color.green);
                }
                if (chess[2][2] == 1) {
                    btnChess9.setBackground(Color.red);
                } else if (chess[2][2] == 2) {
                    btnChess9.setBackground(Color.green);
                }
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Error" + ex);
        }

    }//GEN-LAST:event_btnLoadActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QiuTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QiuTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QiuTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QiuTicTacToe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QiuTicTacToe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChess1;
    private javax.swing.JButton btnChess2;
    private javax.swing.JButton btnChess3;
    private javax.swing.JButton btnChess4;
    private javax.swing.JButton btnChess5;
    private javax.swing.JButton btnChess6;
    private javax.swing.JButton btnChess7;
    private javax.swing.JButton btnChess8;
    private javax.swing.JButton btnChess9;
    private javax.swing.JRadioButton btnEasy;
    private javax.swing.JButton btnExit;
    private javax.swing.JRadioButton btnHard;
    private javax.swing.JButton btnLoad;
    private javax.swing.JRadioButton btnMiddle;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnRule;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStart;
    private javax.swing.ButtonGroup btngDifficulties;
    private javax.swing.JLabel lblDefinition;
    private javax.swing.JLabel lblDifficulties;
    private javax.swing.JLabel lblPlayer;
    private javax.swing.JPanel pnlChesstable;
    private javax.swing.JScrollPane scrResult;
    private javax.swing.JSpinner spnPlayer;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration//GEN-END:variables

    /**
     * This method runs the player one's next step
     *
     *
     * @param row - the row of the arrey
     * @param column - the column of the arrey
     * @param button - the button # on the chesstable
     *
     */
    private void player1NextStep(int row, int column, int button) {

        //set the box user choose the player1's colour
        if (button == 1) {
            btnChess1.setBackground(Color.red);
        } else if (button == 2) {
            btnChess2.setBackground(Color.red);
        } else if (button == 3) {
            btnChess3.setBackground(Color.red);
        } else if (button == 4) {
            btnChess4.setBackground(Color.red);
        } else if (button == 5) {
            btnChess5.setBackground(Color.red);
        } else if (button == 6) {
            btnChess6.setBackground(Color.red);
        } else if (button == 7) {
            btnChess7.setBackground(Color.red);
        } else if (button == 8) {
            btnChess8.setBackground(Color.red);
        } else if (button == 9) {
            btnChess9.setBackground(Color.red);
        }
        //and also store the result into the int arrey
        chess[row][column] = 1;
        //and next step if for player 2
        player1 = false;
        //also display the result to the user
        txtResult.setText("User 2 please choose your next step");

    }

    /**
     * This method runs the player two's next step
     *
     *
     * @param row - the row of the arrey
     * @param column - the column of the arrey
     * @param button - the button # on the chesstable
     *
     */
    private void player2NextStep(int row, int column, int button) {

        //set the box user choose the player1's colour
        if (button == 1) {
            btnChess1.setBackground(Color.green);
        } else if (button == 2) {
            btnChess2.setBackground(Color.green);
        } else if (button == 3) {
            btnChess3.setBackground(Color.green);
        } else if (button == 4) {
            btnChess4.setBackground(Color.green);
        } else if (button == 5) {
            btnChess5.setBackground(Color.green);
        } else if (button == 6) {
            btnChess6.setBackground(Color.green);
        } else if (button == 7) {
            btnChess7.setBackground(Color.green);
        } else if (button == 8) {
            btnChess8.setBackground(Color.green);
        } else if (button == 9) {
            btnChess9.setBackground(Color.green);
        }
        //and also store the result into the int arrey
        chess[row][column] = 2;
        //and next step if for player 1
        player1 = true;
        //also display the result to the user
        txtResult.setText("User 1 please choose your next step");

    }

    /**
     * This method checks if the game is finished and if there is a winner
     *
     */
    private void checkWinner() {
        String msg;
        //firstly check player1 wins or not, follow the order of horizontal -> horizontal -> oblique, and if game is finished, disable all button to let the user choose again
        if (chess[0][0] == 1 && chess[0][1] == 1 && chess[0][2] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[1][0] == 1 && chess[1][1] == 1 && chess[1][2] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[2][0] == 1 && chess[2][1] == 1 && chess[2][2] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][0] == 1 && chess[1][0] == 1 && chess[2][0] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][1] == 1 && chess[1][1] == 1 && chess[2][1] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][2] == 1 && chess[1][2] == 1 && chess[2][2] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][0] == 1 && chess[1][1] == 1 && chess[2][2] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][2] == 1 && chess[1][1] == 1 && chess[2][0] == 1) {
            msg = "Player 1 wins! Congratulations!";
            gameFinish(msg);
            //and then check player2 win or not
        } else if (chess[0][0] == 2 && chess[0][1] == 2 && chess[0][2] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[1][0] == 2 && chess[1][1] == 2 && chess[1][2] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[2][0] == 2 && chess[2][1] == 2 && chess[2][2] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][0] == 2 && chess[1][0] == 2 && chess[2][0] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][1] == 2 && chess[1][1] == 2 && chess[2][1] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][2] == 2 && chess[1][2] == 2 && chess[2][2] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][0] == 2 && chess[1][1] == 2 && chess[2][2] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
        } else if (chess[0][2] == 2 && chess[1][1] == 2 && chess[2][0] == 2) {
            msg = "Player 2 wins! Congratulations!";
            gameFinish(msg);
            //and if all blocks are choosen, tell the user that this game is finished with no winner,also disable all buttons to let the user set the game again
        } else if (chess[0][0] != 0 && chess[1][0] != 0 && chess[2][0] != 0 && chess[0][1] != 0 && chess[1][1] != 0 && chess[2][1] != 0 && chess[0][2] != 0 && chess[1][2] != 0 && chess[2][2] != 0) {
            msg = "No one wins:(";
            gameFinish(msg);
        }
    }

    private void gameFinish(String msg) {
        //enable all buttons
        disableBtns();
        //and show the result to the user
        txtResult.setText(msg + "\nPlease choose the player number and the difficulties for computer (if only one player).\n"
                + "Click start button to start the game.");
        //also enable the rule settings and allow user to change it again
        spnPlayer.setEnabled(true);
        btnEasy.setEnabled(true);
        btnMiddle.setEnabled(true);
        btnHard.setEnabled(true);
        //and set the chess result to 0
        for (int row = 0; row < 3; row++) {
            for (int column = 0; column < 3; column++) {
                chess[row][column] = 0;
            }
        }
    }

    private void disableBtns() {
        //enable all chesses
        btnChess1.setEnabled(false);
        btnChess2.setEnabled(false);
        btnChess3.setEnabled(false);
        btnChess4.setEnabled(false);
        btnChess5.setEnabled(false);
        btnChess6.setEnabled(false);
        btnChess7.setEnabled(false);
        btnChess8.setEnabled(false);
        btnChess9.setEnabled(false);
        //and also disable the save button because no empty game needs to save
        btnSave.setEnabled(false);
    }

    private void enableBtns() {
        btnChess1.setEnabled(true);
        btnChess2.setEnabled(true);
        btnChess3.setEnabled(true);
        btnChess4.setEnabled(true);
        btnChess5.setEnabled(true);
        btnChess6.setEnabled(true);
        btnChess7.setEnabled(true);
        btnChess8.setEnabled(true);
        btnChess9.setEnabled(true);
        //and when a new game started, let the user enable the save function again
        btnSave.setEnabled(true);
    }

    private void aiEasy() {//easy computer will follow the order of central->corner->middle and randomly choose which place will be
        if (chess[1][1] == 0) {//if the center is empty, next step will be here
            player2NextStep(1, 1, 5);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][0] == 0 || chess[0][2] == 0 || chess[2][0] == 0 || chess[2][2] == 0) {
            int random = (int) (Math.random() * 4 + 1);//give a random number
            if (random == 1) {
                if (chess[0][0] == 0) {
                    player2NextStep(0, 0, 1);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][2] == 0) {
                    player2NextStep(0, 2, 3);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][0] == 0) {
                    player2NextStep(2, 0, 7);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][2] == 0) {
                    player2NextStep(2, 2, 9);//run the method and input the row, column and button number
                    checkWinner();
                }
            } else if (random == 2) {
                if (chess[0][2] == 0) {
                    player2NextStep(0, 2, 3);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][0] == 0) {
                    player2NextStep(2, 0, 7);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][2] == 0) {
                    player2NextStep(2, 2, 9);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][0] == 0) {
                    player2NextStep(0, 0, 1);//run the method and input the row, column and button number
                    checkWinner();
                }
            } else if (random == 3) {
                if (chess[2][0] == 0) {
                    player2NextStep(2, 0, 7);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][2] == 0) {
                    player2NextStep(2, 2, 9);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][0] == 0) {
                    player2NextStep(0, 0, 1);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][2] == 0) {
                    player2NextStep(0, 2, 3);//run the method and input the row, column and button number
                    checkWinner();
                }
            } else if (random == 4) {
                if (chess[2][2] == 0) {
                    player2NextStep(2, 2, 9);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][0] == 0) {
                    player2NextStep(0, 0, 1);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][2] == 0) {
                    player2NextStep(0, 2, 3);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][0] == 0) {
                    player2NextStep(2, 0, 7);//run the method and input the row, column and button number
                    checkWinner();
                }
            }
        } else {
            int random = (int) (Math.random() * 4 + 1);//give a random number
            if (random == 1) {
                if (chess[0][1] == 0) {
                    player2NextStep(0, 1, 2);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[1][0] == 0) {
                    player2NextStep(1, 0, 4);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[1][2] == 0) {
                    player2NextStep(1, 2, 6);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][1] == 0) {
                    player2NextStep(2, 1, 8);//run the method and input the row, column and button number
                    checkWinner();
                }
            } else if (random == 2) {
                if (chess[1][0] == 0) {
                    player2NextStep(1, 0, 4);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[1][2] == 0) {
                    player2NextStep(1, 2, 6);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][1] == 0) {
                    player2NextStep(2, 1, 8);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][1] == 0) {
                    player2NextStep(0, 1, 2);//run the method and input the row, column and button number
                    checkWinner();
                }
            } else if (random == 3) {
                if (chess[1][2] == 0) {
                    player2NextStep(1, 2, 6);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[2][1] == 0) {
                    player2NextStep(2, 1, 8);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][1] == 0) {
                    player2NextStep(0, 1, 2);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[1][0] == 0) {
                    player2NextStep(1, 0, 4);//run the method and input the row, column and button number
                    checkWinner();
                }
            } else if (random == 4) {
                if (chess[2][1] == 0) {
                    player2NextStep(2, 1, 8);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[0][1] == 0) {
                    player2NextStep(0, 1, 2);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[1][0] == 0) {
                    player2NextStep(1, 0, 4);//run the method and input the row, column and button number
                    checkWinner();
                } else if (chess[1][2] == 0) {
                    player2NextStep(1, 2, 6);//run the method and input the row, column and button number
                    checkWinner();
                }
            }

        }
    }

    private void aiMiddle() {//middle computer will follow the rules and check if the user has two cheeses in one line and block the other one
        //check the horizontal first, follow the order line1->line2->line3
        if (chess[0][0] == 1 && chess[0][1] == 1 && chess[0][2] == 0) {//first check if the first line 
            player2NextStep(0, 2, 3);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][0] == 1 && chess[0][2] == 1 && chess[0][1] == 0) {
            player2NextStep(0, 1, 2);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][1] == 1 && chess[0][2] == 1 && chess[0][0] == 0) {
            player2NextStep(0, 0, 1);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][0] == 1 && chess[1][1] == 1 && chess[1][2] == 0) {//and then check the second line
            player2NextStep(1, 2, 6);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][0] == 1 && chess[1][2] == 1 && chess[1][1] == 0) {
            player2NextStep(1, 1, 5);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][1] == 1 && chess[1][2] == 1 && chess[1][0] == 0) {
            player2NextStep(1, 0, 4);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[2][0] == 1 && chess[2][1] == 1 && chess[2][2] == 0) {//and then check the third line
            player2NextStep(2, 2, 9);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[2][0] == 1 && chess[2][2] == 1 && chess[2][1] == 0) {
            player2NextStep(2, 1, 8);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[2][1] == 1 && chess[2][2] == 1 && chess[2][0] == 0) {
            player2NextStep(2, 0, 7);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][0] == 1 && chess[1][0] == 1 && chess[2][0] == 0) {//then chech the verticle, first check if the first line 
            player2NextStep(2, 0, 7);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][0] == 1 && chess[2][0] == 1 && chess[1][0] == 0) {
            player2NextStep(1, 0, 4);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][0] == 1 && chess[2][0] == 1 && chess[0][0] == 0) {
            player2NextStep(0, 0, 1);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][1] == 1 && chess[1][1] == 1 && chess[2][1] == 0) {//and then check the next line 
            player2NextStep(2, 1, 8);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][1] == 1 && chess[2][1] == 1 && chess[1][1] == 0) {
            player2NextStep(1, 1, 5);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][1] == 1 && chess[2][1] == 1 && chess[0][1] == 0) {
            player2NextStep(0, 1, 2);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][2] == 1 && chess[1][2] == 1 && chess[2][2] == 0) {//and then check the next line
            player2NextStep(2, 2, 9);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][2] == 1 && chess[2][2] == 1 && chess[1][2] == 0) {
            player2NextStep(1, 2, 6);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][2] == 1 && chess[2][2] == 1 && chess[0][2] == 0) {
            player2NextStep(0, 2, 3);//run the met  hod and input the row, column and button number
            checkWinner();
        } else if (chess[0][0] == 1 && chess[1][1] == 1 && chess[2][2] == 0) {//and then check the oblique, first check if the left to right
            player2NextStep(2, 2, 9);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][0] == 1 && chess[2][2] == 1 && chess[1][1] == 0) {
            player2NextStep(1, 1, 5);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][1] == 1 && chess[2][2] == 1 && chess[0][0] == 0) {
            player2NextStep(0, 0, 1);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][2] == 1 && chess[1][1] == 1 && chess[2][0] == 0) {//and then check the right to left
            player2NextStep(2, 0, 7);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][2] == 1 && chess[2][0] == 1 && chess[1][1] == 0) {
            player2NextStep(1, 1, 5);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][1] == 1 && chess[2][0] == 1 && chess[0][2] == 0) {
            player2NextStep(0, 2, 3);//run the method and input the row, column and button number
            checkWinner();
        } else {
            aiEasy();//if nothing applied, run the basic rule
        }
    }

    private void aiHard() {//hard computer will also check if there are a corner that has two chess around, if so block it
        if (chess[0][1] == 1 && chess[1][0] == 1 && chess[0][0] == 0) {//firstly check the top left corner
            player2NextStep(0, 0, 1);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[0][1] == 1 && chess[1][2] == 1 && chess[0][2] == 0) {//and then check the top right corner
            player2NextStep(0, 2, 3);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][0] == 1 && chess[2][1] == 1 && chess[2][0] == 0) {//after that check the bottom left corner
            player2NextStep(2, 0, 7);//run the method and input the row, column and button number
            checkWinner();
        } else if (chess[1][2] == 1 && chess[2][1] == 1 && chess[2][2] == 0) {//in the end check the bottom right corner
            player2NextStep(2, 2, 9);//run the method and input the row, column and button number
            checkWinner();
        } else {//otherwise run the middle difficulties code
            aiMiddle();
        }
    }

}
